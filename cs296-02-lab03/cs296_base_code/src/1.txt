/*
* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/

/* 
 * Base code for CS 296 Software Systems Lab 
 * Department of Computer Science and Engineering, IIT Bombay
 * Instructor: Parag Chaudhuri
 */


#include "cs296_base.hpp"
#include "render.hpp"

#ifdef __APPLE__
	#include <GLUT/glut.h>
#else
	#include "GL/freeglut.h"
#endif

#include <cstring>
using namespace std;

#include "dominos.hpp"

namespace cs296
{
  /**  This is the constructor 
   * This is the documentation block for the constructor.
   */ 
/*! \par
*b2BodyDef bd defines the body. <br>
*m_world is the physics world creates in Box2D.<br>
*CreateFixture is used to fix a body to a parent body and hence many of its properties become local to the parent body.<br>
*CreateBody creates a new body in the m_world.<br>
*/
	b2Body* sbody; //left tyre of central part
	b2Body* sbody2; //right tyre of central part
	b2Body* spherebody; //rightmost tyre
	b2Body* spherebody1; //leftmost tyre
	b2RevoluteJointDef jointDefs5; // right rod right tyre centre
	b2RevoluteJointDef jointDefs6; // left rod left tyre centre
	b2RevoluteJointDef jointDef3; //back tyre and L3
	b2RevoluteJointDef jointDef; //front tyre and L1
	
	void dominos_t::keyboard(unsigned char key)
	{
    
    switch (key)
    {
      
    //! Press 'd' to move forward.
    case 'd':
    spherebody1->ApplyTorque(50.f, true);
    sbody->ApplyTorque(50.f, true);
    sbody2->ApplyTorque(50.f, true);
    spherebody->ApplyTorque(50.f, true);
	//~ spherebody1->ApplyLinearImpulse(b2Vec2(50,0), spherebody1->GetWorldCenter(), false);
	//~ spherebody->ApplyLinearImpulse(b2Vec2(50,0), spherebody->GetWorldCenter(), false);
	//~ sbody2->ApplyLinearImpulse(b2Vec2(50,0), sbody2->GetWorldCenter(), false);
	//~ sbody->ApplyLinearImpulse(b2Vec2(50,0), sbody->GetWorldCenter(), false);
	//spherebody1->ApplyLinearImpulse(b2Vec2(50,0), spherebody1->GetWorldCenter(), false);
    break;
      
    //! Press 'a' to move backward.
    case 'a':
	//~ spherebody1->ApplyLinearImpulse(b2Vec2(-50,0), spherebody1->GetWorldCenter(), false);
	//~ spherebody->ApplyLinearImpulse(b2Vec2(-50,0), spherebody->GetWorldCenter(), false);
	//~ sbody2->ApplyLinearImpulse(b2Vec2(-50,0), sbody2->GetWorldCenter(), false);
	//~ sbody->ApplyLinearImpulse(b2Vec2(-50,0), sbody->GetWorldCenter(), false);
    //~ spherebody1->ApplyForce(b2Vec2(-50.f,0), spherebody1->GetWorldCenter(), true);
    //spherebody1->ApplyForce( b2Vec2(-50,0), spherebody1->GetWorldCenter() );
      break;
	
	}
	}	

  dominos_t::dominos_t()
  {
		
    b2Body* b1; //! b1 is a pointer to the ground which is a Box2D body. 

	/*! \par Block 1: Ground
	 * A Box2D Edge shape used to represent ground. <br>
	 * Edge is set between two points on x-axis x1=-90 and x2=90. <br>
	 * bd is a Box2D body definition.<br>
	 * b1 is then pointed to a body created with body definition bd<br>
	 * A fixture is created on the body with Edge shape created earlier and 0 density
	 */
    {
      b2EdgeShape shape;     
      shape.Set(b2Vec2(-90.0f, 0.0f), b2Vec2(90.0f, 0.0f));
      b2BodyDef bd; 
      b1 = m_world->CreateBody(&bd);
      b1->CreateFixture(&shape, 0.0f);
    }
    {
		/*! \par Block 6:The train of small spheres
		   * Variable:spherebody :: Type:circle :: Value:radius=0.5  <br>
		   * Variable:ballfd :: Type:FixtureDef :: Value:density=1,friction=0,restitution=0 <br>
		   * Variable:ballbd :: number:10 :: Type:dynamicBody :: Value:position x=-22.2+ i and y=26.6 units :: Action:To move after hit by dominos. <br>
		   * 
		   */
		
		//Horizontal top rod
      b2PolygonShape shape;
      shape.SetAsBox(6.0f, 0.5f);
      b2BodyDef bd;
      bd.position.Set(0.0f, 13.5f);
      bd.type = b2_dynamicBody;
      b2Body* body = m_world->CreateBody(&bd);
      b2FixtureDef fd;
      fd.filter.groupIndex = -1;
      fd.filter.categoryBits = 0x0002;
      fd.filter.maskBits = 0x0004;
      fd.density = 2700.0f;
      fd.shape = &shape;
      body->CreateFixture(&fd);
     // Left hand side vertical rod 
      b2PolygonShape shape2;
      int32 count = 4;
      b2Vec2 ver[4];
      ver[2].Set(0.5f, 6.0f);
      ver[1].Set(0.5f, -6.5f);
      ver[0].Set(-0.5f, -6.5f);
      ver[3].Set(-0.5f, 6.0f);
      shape2.Set(ver, count);
      b2BodyDef bd2;
      bd2.position.Set(-5.5f, 8.0f);
      bd2.type = b2_dynamicBody;
      b2Body* body2 = m_world->CreateBody(&bd2);
      b2FixtureDef fd2;
      fd2.filter.groupIndex = -1;
      fd2.filter.categoryBits = 0x0002;
      fd2.filter.maskBits = 0x0004;
      fd2.density = 2700.0f;
      fd2.shape = &shape2;
      body2->CreateFixture(&fd2);
     //Right hand side vertical rod  
      b2BodyDef bd3;
      bd3.position.Set(5.5f, 8.0f);
      bd3.type = b2_dynamicBody;
      b2Body* body3 = m_world->CreateBody(&bd3);
      body3->CreateFixture(&fd2);
     // Lower horizontal rod 
      b2BodyDef bd4;
      bd4.position.Set(0.0f, 10.5f);
      bd4.type = b2_dynamicBody;
      b2Body* body4 = m_world->CreateBody(&bd4);
      body4->CreateFixture(&fd);
     //Joint for top rod and left rod
      b2RevoluteJointDef jointDefs;
      b2Vec2 v1(-5.5f,13.5f);
      jointDefs.Initialize(body,body2,v1);
      jointDefs.localAnchorA.Set(-5.5f,0.0f) ;
      jointDefs.localAnchorB.Set(0.0f,5.5f);
      jointDefs.collideConnected = false;
      m_world->CreateJoint(&jointDefs);		
      //Joint for top rod and right rod
      b2RevoluteJointDef jointDefs2;
      b2Vec2 v2(5.5f,13.5f);
      jointDefs2.Initialize(body,body3,v2);
      jointDefs2.localAnchorA.Set(5.5f,0.0f) ;
      jointDefs2.localAnchorB.Set(0.0f,5.5f);
      jointDefs2.collideConnected = false;
      m_world->CreateJoint(&jointDefs2);		
      //joint for bottom rod and left rod
      b2RevoluteJointDef jointDefs3;
      b2Vec2 v3(-5.5f,10.5f);
      jointDefs3.Initialize(body4,body2,v3);
      jointDefs3.localAnchorA.Set(-5.5f,0.0f) ;
      jointDefs3.localAnchorB.Set(0.0f,2.5f);
      jointDefs3.collideConnected = false;
      m_world->CreateJoint(&jointDefs3);		
      //joint for bottom rod and right rod
      b2RevoluteJointDef jointDefs4;
      b2Vec2 v4(5.5f,10.5f);
      jointDefs4.Initialize(body4,body3,v4);
      jointDefs4.localAnchorA.Set(5.5f,0.0f) ;
      jointDefs4.localAnchorB.Set(0.0f,2.5f);
      jointDefs4.collideConnected = false;
      m_world->CreateJoint(&jointDefs4);	
      //left tyre
      
      b2CircleShape circle;
      circle.m_radius = 2.0f;
      b2FixtureDef ballfds;
      ballfds.shape = &circle;
      ballfds.density = 800.0f;
      ballfds.friction = 0.5f;
      ballfds.restitution = 0.5f;
      b2BodyDef ballbds;
      ballbds.type = b2_dynamicBody;
      ballbds.position.Set(-5.5f, 2.0f);
      sbody = m_world->CreateBody(&ballbds);
      sbody->CreateFixture(&ballfds);	
      //right tyre
      b2BodyDef ballbd2;
      ballbd2.type = b2_dynamicBody;
      ballbd2.position.Set(5.5f, 2.0f);
      sbody2 = m_world->CreateBody(&ballbd2);
      sbody2->CreateFixture(&ballfds);
	
      //Joint joining right rod and right tyre
      
      jointDefs5.Initialize(sbody2,body3,sbody2->GetWorldCenter());
      jointDefs5.localAnchorB.Set(0.0f,-6.0f);
      jointDefs5.collideConnected = false;
      m_world->CreateJoint(&jointDefs5);	
      jointDefs5.enableMotor = true;
      jointDefs5.maxMotorTorque = 20000000.0f;
      jointDefs5.motorSpeed = 10.0f;
      //Joint joining left rod and left tyre
   
      jointDefs6.Initialize(sbody,body2,sbody->GetWorldCenter());
      jointDefs6.localAnchorB.Set(0.0f,-6.0f);
      jointDefs6.collideConnected = false;
      m_world->CreateJoint(&jointDefs6);
      //var revJoint:b2RevoluteJoint = world.CreateJoint(def) as b2RevoluteJoint;	
      jointDefs6.enableMotor = true;
      jointDefs6.maxMotorTorque = 20000000.0f;
      jointDefs6.motorSpeed = 10.0f;
		
		//palash
		//front part
		
		//front tyre
		
		b2BodyDef ballbd;
		ballbd.type = b2_dynamicBody;
		ballbd.position.Set(19.5f, 2.0f);
		spherebody = m_world->CreateBody(&ballbd);
		spherebody->CreateFixture(&ballfds);
		

		//L1
		count = 4;
		b2Vec2 vertices[4];
		vertices[2].Set(0.5f, 0.5f);
		vertices[1].Set(0.5f, -6.5f);
		vertices[0].Set(-0.5f, -6.5f);
		vertices[3].Set(-0.5f, 0.5f);
		b2Body* L1;
		b2PolygonShape l1shape;
		l1shape.Set(vertices, count);
		b2FixtureDef l1fd;
		l1fd.shape = &l1shape;
		l1fd.density = 2700.0f;
		l1fd.friction = 0.0f;
		l1fd.restitution = 0.0f;
		b2BodyDef l1bd;
		l1bd.type = b2_dynamicBody;
		l1bd.position.Set(19.5f, 8.0f);
		L1 = m_world->CreateBody(&l1bd);
		L1->CreateFixture(&l1fd);
		
		//L2
		b2Vec2 vertices1[4];
		vertices1[2].Set(0.5f, 0.5f);
		vertices1[1].Set(0.5f, -0.5f);
		vertices1[0].Set(-4.5f, -0.5f);
		vertices1[3].Set(-4.5f, 0.5f);
		b2Body* L2;
		b2PolygonShape l2shape;
		l2shape.Set(vertices1, count);
		b2FixtureDef l2fd;
		l2fd.shape = &l2shape;
		l2fd.density = 2700.0f;
		l2fd.friction = 0.0f;
		l2fd.restitution = 0.0f;
		b2BodyDef l2bd;
		l2bd.type = b2_dynamicBody;
		l2bd.position.Set(19.5f, 8.0f);
		L2 = m_world->CreateBody(&l2bd);
		L2->CreateFixture(&l2fd);
		
		//R1
		b2Vec2 vertices2[4];
		vertices2[2].Set(-6.0f, 13.0f);
		vertices2[1].Set(0.5f, -0.5f);
		vertices2[0].Set(-0.5f,-0.5f);
		vertices2[3].Set(-7.0f, 13.0f);
		b2Body* R1;
		b2PolygonShape r1shape;
		r1shape.Set(vertices2, count);
		b2FixtureDef r1fd;
		r1fd.shape = &r1shape;
		r1fd.density = 2700.0f;
		r1fd.filter.categoryBits = 0x0002;
		r1fd.filter.maskBits = 0x0002;
		r1fd.friction = 0.0f;
		r1fd.restitution = 0.0f;
		b2BodyDef r1bd;
		r1bd.type = b2_dynamicBody;
		r1bd.position.Set(15.5f, 8.0f);
		R1 = m_world->CreateBody(&r1bd);
		R1->CreateFixture(&r1fd);
		
		//upper fork connector
		b2Vec2 vertice3[4];
		vertice3[2].Set(0.5f, 0.5f);
		vertice3[1].Set(0.5f, -0.5f);
		vertice3[0].Set(-11.0f,-0.5f);
		vertice3[3].Set(-11.0f, 0.5f);
		b2Body* upperFork;
		b2PolygonShape upperForkshape;
		upperForkshape.Set(vertice3, count);
		b2FixtureDef upperForkfd;
		upperForkfd.shape = &upperForkshape;
		upperForkfd.density = 2700.0f;
		upperForkfd.filter.categoryBits = 0x0002;
		upperForkfd.filter.maskBits = 0x0002;
		upperForkfd.friction = 0.5f;
		upperForkfd.restitution = 0.0f;
		b2BodyDef upperForkbd;
		upperForkbd.type = b2_dynamicBody;
		upperForkbd.position.Set(15.5f, 22.5f);
		upperFork = m_world->CreateBody(&upperForkbd);
		upperFork->CreateFixture(&upperForkfd);
		//upper fork connector 2
		b2Vec2 vertice4[4];
		vertice4[2].Set(0.5f, 0.5f);
		vertice4[1].Set(0.5f, -0.5f);
		vertice4[0].Set(-9.5f,-0.5f);
		vertice4[3].Set(-9.5f, 0.5f);
		b2Body* lowerFork;
		b2PolygonShape lowerForkshape;
		lowerForkshape.Set(vertice4, count);
		b2FixtureDef lowerForkfd;
		lowerForkfd.shape = &lowerForkshape;
		lowerForkfd.density = 2700.0f;
		lowerForkfd.filter.categoryBits = 0x0002;
		lowerForkfd.filter.maskBits = 0x0002;
		lowerForkfd.friction = 0.0f;
		lowerForkfd.restitution = 0.0f;
		b2BodyDef lowerForkbd;
		lowerForkbd.type = b2_dynamicBody;
		lowerForkbd.position.Set(15.5f, 19.5f);
		lowerFork = m_world->CreateBody(&lowerForkbd);
		lowerFork->CreateFixture(&lowerForkfd);
		
		//front tyre and L1
		
		jointDef.bodyA = spherebody;
		jointDef.bodyB = L1;
		jointDef.localAnchorA.Set(0,0);
		jointDef.localAnchorB.Set(0,-6.0f);
		jointDef.collideConnected = false;
		jointDef.enableMotor = true;
		jointDef.maxMotorTorque = 20000000.0f;
		jointDef.motorSpeed = 10.0f;
		m_world->CreateJoint(&jointDef);
		
		//L1 and L2
		b2WeldJointDef jointDef1;
		jointDef1.bodyA = L1;
		jointDef1.bodyB = L2;
		jointDef1.localAnchorA.Set(0,0);
		jointDef1.localAnchorB.Set(0,0);
		jointDef1.collideConnected = false;
		m_world->CreateJoint(&jointDef1);
		
		//L2 and R1
		b2WeldJointDef jointDef2;
		jointDef2.bodyA = L2;
		jointDef2.bodyB = R1;
		jointDef2.localAnchorA.Set(-4.0,0);
		jointDef2.localAnchorB.Set(0, 0);
		jointDef2.collideConnected = false;
		m_world->CreateJoint(&jointDef2);
		//upper fork and R1
        b2RevoluteJointDef jointDefu3;
		jointDefu3.bodyA = upperFork;
		jointDefu3.bodyB = R1;
		jointDefu3.localAnchorA.Set(0,0);
		jointDefu3.localAnchorB.Set(-6.5f,12.5f);
		jointDefu3.collideConnected = false;
		m_world->CreateJoint(&jointDefu3);
		//lower fork and R1
        b2RevoluteJointDef jointDefu4;
		jointDefu4.bodyA = lowerFork;
		jointDefu4.bodyB = R1;
		jointDefu4.localAnchorA.Set(0,0);
		jointDefu4.localAnchorB.Set(-5,9.5f);
		jointDefu4.collideConnected = false;
		m_world->CreateJoint(&jointDefu4);
		//back part
		
		//back tyre
		b2BodyDef ballbd1;
		ballbd1.type = b2_dynamicBody;
		ballbd1.position.Set(-20.0f,2.0f);
		spherebody1 = m_world->CreateBody(&ballbd1);
		spherebody1->CreateFixture(&ballfds);
		
		//L3
		b2Vec2 vertices3[4];
		vertices3[2].Set(0.5f, 0.5f);
		vertices3[1].Set(0.5f, -8.0f);
		vertices3[0].Set(-0.5f, -8.0f);
		vertices3[3].Set(-0.5f, 0.5f);
		b2Body* L3;
		b2PolygonShape l3shape;
		l3shape.Set(vertices3, count);
		b2FixtureDef l3fd;
		l3fd.shape = &l3shape;
		l3fd.density = 2700.0f;
		l3fd.friction = 0.0f;
		l3fd.restitution = 0.0f;
		b2BodyDef l3bd;
		l3bd.type = b2_dynamicBody;
		l3bd.position.Set(-20.0f, 9.5f);
		L3 = m_world->CreateBody(&l3bd);
		L3->CreateFixture(&l3fd);
		
		//L3 and back tyre
		
		jointDef3.bodyA = spherebody1;
		jointDef3.bodyB = L3;
		jointDef3.localAnchorA.Set(0,0);
		jointDef3.localAnchorB.Set(0, -7.5f);
		jointDef3.collideConnected = false;
		jointDef3.enableMotor = true;
		jointDef3.maxMotorTorque = 20000000.0f;
		jointDef3.motorSpeed = 10.0f;
		m_world->CreateJoint(&jointDef3);
		
		//L4
		b2Vec2 vertices4[4];
		vertices4[2].Set(-0.5f, 0.5f);
		vertices4[1].Set(-0.5f, -0.5f);
		vertices4[0].Set(6.5f, -0.5f);
		vertices4[3].Set(6.5f, 0.5f);
		b2Body* L4;
		b2PolygonShape l4shape;
		l4shape.Set(vertices4, count);
		b2FixtureDef l4fd;
		l4fd.shape = &l4shape;
		l4fd.density = 2700.0f;
		l4fd.friction = 0.0f;
		l4fd.restitution = 0.0f;
		b2BodyDef l4bd;
		l4bd.type = b2_dynamicBody;
		l4bd.position.Set(-20.0f, 9.5f);
		L4 = m_world->CreateBody(&l4bd);
		L4->CreateFixture(&l4fd);
		
		//L3 and L4
		b2WeldJointDef jointDef4;
		jointDef4.bodyA = L3;
		jointDef4.bodyB = L4;
		jointDef4.collideConnected = false;
		m_world->CreateJoint(&jointDef4);
		
		//R2
		b2Vec2 vertices5[4];
		vertices5[2].Set(5.0f, 4.5f);
		vertices5[1].Set(0.5f, -0.5f);
		vertices5[0].Set(-0.5f,-0.5f);
		vertices5[3].Set(4.0f, 4.5f);
		b2Body* R2;
		b2PolygonShape r2shape;
		r2shape.Set(vertices5, count);
		b2FixtureDef r2fd;
		r2fd.filter.categoryBits = 0x0002;
		r2fd.shape = &r2shape;
		r2fd.density = 2700.0f;
		r2fd.friction = 0.5f;
		r2fd.restitution = 0.0f;
		b2BodyDef r2bd;
		r2bd.angle = -0.6;
		r2bd.type = b2_dynamicBody;
		r2bd.position.Set(-14.0f, 9.5f);
		R2 = m_world->CreateBody(&r2bd);
		R2->CreateFixture(&r2fd);
		
		//L4 and R2
		b2WeldJointDef jointDef5;
		jointDef5.bodyA = L4;
		jointDef5.bodyB = R2;
		jointDef5.localAnchorA.Set(6.0,0);
		jointDef5.localAnchorB.Set(0, 0);
		jointDef5.collideConnected = true;
		m_world->CreateJoint(&jointDef5);
		
		//main frame
		b2PolygonShape shapeOfMainFrame;
		shapeOfMainFrame.SetAsBox(9.5f, 0.25f);
		b2BodyDef mainFrame;
		mainFrame.position.Set(-1.5f, 9.75f);
		mainFrame.type = b2_dynamicBody;
		b2Body* mFrame = m_world->CreateBody(&mainFrame);
		b2FixtureDef fmFrame;
		fmFrame.filter.groupIndex = -1;
		fmFrame.filter.categoryBits = 0x0002;
		fmFrame.density = 2700.f;
		fmFrame.shape = &shapeOfMainFrame;
		mFrame->CreateFixture(&fmFrame);
		
		b2PolygonShape BoxOnMainFrame;
		BoxOnMainFrame.SetAsBox(1.5f, 2.25f);
		b2BodyDef boxOnMainFrame;
		boxOnMainFrame.position.Set(0.0f, 12.25f);
		boxOnMainFrame.type = b2_dynamicBody;
		b2Body* bFrame = m_world->CreateBody(&boxOnMainFrame);
		b2FixtureDef fbFrame;
		fbFrame.filter.groupIndex = -1;
		fbFrame.filter.categoryBits = 0x0002;
		fbFrame.filter.maskBits = 0x0002 | 0x000;
		fbFrame.density = 2700.f;
		fbFrame.shape = &BoxOnMainFrame;
		bFrame->CreateFixture(&fbFrame);
		
		b2PolygonShape backFrame;
		backFrame.SetAsBox(0.5f, 2.25f);
		b2BodyDef backbodyFrame;
		backbodyFrame.position.Set(-9.5f, 12.25f);
		backbodyFrame.type = b2_dynamicBody;
		b2Body* bckFrame = m_world->CreateBody(&backbodyFrame);
		b2FixtureDef bcFrame;
		bcFrame.filter.groupIndex = -1;
		bcFrame.filter.categoryBits = 0x0002;
		bcFrame.filter.maskBits = 0x0002;
		bcFrame.density = 2700.f;
		bcFrame.friction = 0.5f;
		bcFrame.shape = &backFrame;
		bckFrame->CreateFixture(&bcFrame);
		
		b2PolygonShape frontFrame;
		frontFrame.SetAsBox(2.5f, 2.25f);
		b2BodyDef frontForkBox;
		frontForkBox.position.Set(5.5f, 12.25f);
		frontForkBox.type = b2_dynamicBody;
		b2Body* fronFrame = m_world->CreateBody(&frontForkBox);
		b2FixtureDef froFrame;
		froFrame.filter.groupIndex = -1;
		froFrame.filter.categoryBits = 0x0002;
		froFrame.filter.maskBits = 0x0002;
		froFrame.density = 2700.f;
		froFrame.shape = &frontFrame;
		fronFrame->CreateFixture(&froFrame);
		
		b2WeldJointDef bonmframe;
		bonmframe.bodyA = mFrame;
		bonmframe.bodyB = bFrame;
		bonmframe.localAnchorA.Set(1.5f,0.25f);
		bonmframe.localAnchorB.Set(0,-2.25f);
		bonmframe.collideConnected = false;
		m_world->CreateJoint(&bonmframe);
		
		b2WeldJointDef bonm2frame;
		bonm2frame.bodyA = mFrame;
		bonm2frame.bodyB = bckFrame;
		bonm2frame.localAnchorA.Set(-7.5f,0.25f);
		bonm2frame.localAnchorB.Set(0,-2.25f);
		bonm2frame.collideConnected = false;
		m_world->CreateJoint(&bonm2frame);
		
		b2WeldJointDef frontmainframe;
		frontmainframe.bodyA = mFrame;
		frontmainframe.bodyB = fronFrame;
		frontmainframe.localAnchorA.Set(7.5f,0.25f);
		frontmainframe.localAnchorB.Set(0,-2.25f);
		frontmainframe	.collideConnected = false;
		m_world->CreateJoint(&frontmainframe);
		
		//Joint for main frame and top rod
      b2RevoluteJointDef jointDefb1;
      jointDefb1.Initialize(bFrame,body,body->GetWorldCenter());
      jointDefb1.localAnchorA.Set(0.0f,1.75f) ;
      jointDefb1.localAnchorB.Set(0.0f,0.0f);
      jointDefb1.collideConnected = false;
      m_world->CreateJoint(&jointDefb1);		
      //Joint for main frame and bottom rod 
      b2RevoluteJointDef jointDefb2;
      jointDefb2.Initialize(bFrame,body4,body4->GetWorldCenter());
      jointDefb2.localAnchorA.Set(0.5f,-1.75f) ;
      jointDefb2.localAnchorB.Set(0.0f,0.0f);
      jointDefb2.collideConnected = false;
      m_world->CreateJoint(&jointDefb2);		
      //Joint for main frame and backfork 
      b2RevoluteJointDef jointDefb3;
      jointDefb3.Initialize(bckFrame,R2,body4->GetWorldCenter());
      jointDefb3.localAnchorA.Set(0.0f,1.75f) ;
      jointDefb3.localAnchorB.Set(4.5f,4.5f);
      jointDefb3.lowerAngle = -0.5f * b2_pi; // -90 degrees
	  jointDefb3.upperAngle = 0.5f * b2_pi; // 45 degrees
	  jointDefb3.enableLimit = true;
      jointDefb3.collideConnected = false;
      jointDefb3.enableMotor = true;
      jointDefb3.maxMotorTorque = 20000000.0f;
      jointDefb3.motorSpeed = 10.0f;
      m_world->CreateJoint(&jointDefb3);	
      //upper fork and mainframe
        b2RevoluteJointDef jointDefb4;
		jointDefb4.bodyA = upperFork;
		jointDefb4.bodyB = fronFrame;
		jointDefb4.localAnchorA.Set(-10.5f,0);
		jointDefb4.localAnchorB.Set(-0.5f,0.5f);
		jointDefb4.collideConnected = false;
		m_world->CreateJoint(&jointDefb4);	
		//upper fork and mainframe
        b2RevoluteJointDef jointDefb5;
		jointDefb5.bodyA = lowerFork;
		jointDefb5.bodyB = fronFrame;
		jointDefb5.localAnchorA.Set(-10.5f,0);
		jointDefb5.localAnchorB.Set(0.5f,-1.5f);
		jointDefb5.collideConnected = false;
		m_world->CreateJoint(&jointDefb5);	

		
      
	}
//~ 
    //~ 
    {
		 //~ /*! \par Block 7:The pulley system
		   //~ * Variable:bd :: Type:dynamicBody :: Value:position x=-10 and y=15 units.  <br>
		    //~ */   
      b2BodyDef *bd = new b2BodyDef;
      bd->position.Set(45,4);
      bd->fixedRotation = true;
      
      //~ 
	    /*! \par
	     * The open box 
		 * Variable:fd1,fd2,fd3:: Type:FixtureDef :: Value:density=10,fricion=0.5,restitution=0 :: Action:To collect the spheres and pull down the pulley.  <br>
		 * Variable:bs1 :: Type:PolygonShape :: Value: height=2,width=0.2; position x=0,y=-1.9.<br>
		 * Variable:bs2 :: Type:PolygonShape :: Value: height=0.2,width=2; position x=2,y=-0.<br>
		 * Variable:bs3 :: Type:PolygonShape :: Value: height=0.2,width=2; position x=-2,y=0.<br>
		 * Variable:box1 :: Action: Creates a box of fd1,fd2 and fd3.<br>
		*/   
      b2FixtureDef *fd1 = new b2FixtureDef;
      fd1->density = 10.0;
      fd1->friction = 100;
      fd1->restitution = 0.5f;
      fd1->shape = new b2PolygonShape;
      b2PolygonShape bs1;
      bs1.SetAsBox(15,4);
      fd1->shape = &bs1;
       
      b2Body* box1 = m_world->CreateBody(bd);
      box1->CreateFixture(fd1);
    }
  }

  sim_t *sim = new sim_t("Dominos", dominos_t::create);
}


